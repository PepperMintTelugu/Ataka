name: Deploy to Appwrite

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  APPWRITE_CLI_VERSION: "latest"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run type checking
        run: |
          cd frontend
          npm run typecheck

      - name: Run tests
        run: |
          cd frontend
          npm run test

      - name: Run linting
        run: |
          cd frontend
          npm run lint

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Create environment file
        run: |
          cd frontend
          echo "VITE_APPWRITE_ENDPOINT=${{ secrets.VITE_APPWRITE_ENDPOINT }}" > .env
          echo "VITE_APPWRITE_PROJECT_ID=${{ secrets.VITE_APPWRITE_PROJECT_ID }}" >> .env
          echo "VITE_RAZORPAY_KEY_ID=${{ secrets.VITE_RAZORPAY_KEY_ID }}" >> .env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Build application
        run: |
          cd frontend
          npm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  deploy-functions:
    name: Deploy Appwrite Functions
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Appwrite CLI
        run: npm install -g appwrite-cli@${{ env.APPWRITE_CLI_VERSION }}

      - name: Install function dependencies
        run: |
          # Install dependencies for each function
          for function_dir in appwrite-functions/*/; do
            if [ -f "$function_dir/package.json" ]; then
              echo "Installing dependencies for $(basename $function_dir)"
              cd "$function_dir"
              npm ci
              cd - > /dev/null
            fi
          done

      - name: Configure Appwrite CLI
        run: |
          echo "${{ secrets.APPWRITE_CLI_KEY }}" | appwrite login --stdin
          appwrite client --endpoint ${{ secrets.APPWRITE_ENDPOINT }}

      - name: Deploy Functions
        run: |
          # Deploy all functions
          appwrite deploy function --all

      - name: Set Function Environment Variables
        run: |
          # Set environment variables for payment function
          appwrite functions update-variable payment-razorpay \
            --key RAZORPAY_KEY_ID --value "${{ secrets.RAZORPAY_KEY_ID }}"

          appwrite functions update-variable payment-razorpay \
            --key RAZORPAY_KEY_SECRET --value "${{ secrets.RAZORPAY_KEY_SECRET }}"

  deploy-database:
    name: Deploy Database Schema
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Appwrite CLI
        run: npm install -g appwrite-cli@${{ env.APPWRITE_CLI_VERSION }}

      - name: Configure Appwrite CLI
        run: |
          echo "${{ secrets.APPWRITE_CLI_KEY }}" | appwrite login --stdin
          appwrite client --endpoint ${{ secrets.APPWRITE_ENDPOINT }}

      - name: Deploy Database Collections
        run: appwrite deploy collection --all

      - name: Deploy Storage Buckets
        run: appwrite deploy bucket --all

  deploy-hosting:
    name: Deploy Frontend to Appwrite Hosting
    runs-on: ubuntu-latest
    needs: [build, deploy-functions, deploy-database]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Appwrite CLI
        run: npm install -g appwrite-cli@${{ env.APPWRITE_CLI_VERSION }}

      - name: Configure Appwrite CLI
        run: |
          echo "${{ secrets.APPWRITE_CLI_KEY }}" | appwrite login --stdin
          appwrite client --endpoint ${{ secrets.APPWRITE_ENDPOINT }}

      - name: Deploy to Appwrite Hosting
        run: appwrite deploy hosting

      - name: Verify Deployment
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Your site should be available at: ${{ secrets.SITE_URL }}"
          echo "üìä Check the Appwrite Console for deployment status"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-hosting]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify Success
        if: needs.deploy-hosting.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "Site URL: ${{ secrets.SITE_URL }}"
          # Add Slack/Discord notification here if needed

      - name: Notify Failure
        if: needs.deploy-hosting.result != 'success'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for more details."
          # Add failure notification here if needed

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run security audit
        run: |
          cd frontend
          npm audit --audit-level moderate

      - name: Check for sensitive data
        run: |
          # Check for accidentally committed secrets
          if grep -r "sk_live\|pk_live\|rzp_live" frontend/src/ || grep -r "password\|secret" frontend/src/ --include="*.ts" --include="*.tsx" | grep -v "placeholder"; then
            echo "‚ö†Ô∏è  Potential sensitive data found in source code"
            exit 1
          else
            echo "‚úÖ No sensitive data found in source code"
          fi

# Environment variables needed in GitHub Secrets:
# - APPWRITE_CLI_KEY: Your Appwrite CLI API key
# - APPWRITE_ENDPOINT: https://cloud.appwrite.io/v1
# - VITE_APPWRITE_ENDPOINT: https://cloud.appwrite.io/v1
# - VITE_APPWRITE_PROJECT_ID: Your Appwrite project ID
# - VITE_RAZORPAY_KEY_ID: Your Razorpay key ID
# - VITE_GOOGLE_CLIENT_ID: Your Google OAuth client ID
# - RAZORPAY_KEY_ID: Your Razorpay key ID (for functions)
# - RAZORPAY_KEY_SECRET: Your Razorpay key secret (for functions)
# - SITE_URL: Your deployed site URL
